% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sampling.R
\name{sampling}
\alias{sampling}
\title{Posterior sampling of given JAGS (BUGS) code and data}
\usage{
sampling(
  jags_code,
  data,
  type = c("sat", "cross", "pigeons"),
  extract_variable_names = NULL,
  n_chains = NULL,
  n_rounds = NULL,
  N = NULL,
  extended_traces = F
)
}
\arguments{
\item{jags_code}{A string of JAGS code that specifies the model.}

\item{data}{A list of dataset.}

\item{type}{one of "sat", "cross", "pigeons"}

\item{extract_variable_names}{(optional) A vector of strings that
contain the variable names that will be extracted}

\item{n_chains}{n_chains for Pigeons.jl The size of final sample is
n_chains * 2^(n_rounds)}

\item{n_rounds}{n_rounds for Pigeons.jl The size of final sample is
n_chains * 2^(n_rounds)}

\item{N}{type sat and cross will generate the posterior sample of size N}

\item{extended_traces}{logical. If TRUE, all serialized chains are recorded.}
}
\value{
Either a list or julia object. Results including samples.
}
\description{
This function returns the results of sampling from posteriors of given model
and data using either importance sampling with
transparent reparameterization (ISTP) or pigeons algorithm.
}
\examples{
jags_code <-
"model{
y[1:4] ~ dmulti(eta[1:4], n)
eta[1:4] <- c(se*pi[1]+(1-sp)*pi[3],
se*pi[2]+(1-sp)*pi[4],
sp*pi[3]+(1-se)*pi[1],
(1-se)*pi[2]+sp*pi[4])
pi[1:4] ~ ddirch(c(1,1,1,1))
se ~ dbeta(25,3)
sp ~ dbeta(30,1.5)
}"
data(small_cross)
data = list(y = small_cross, n = sum(small_cross))
results = sampling(jags_code, data, "cross", N = 15000)
results$ess
head(results$samples)

data(small_sat)
sigma = 0.5 #Hyperparameter, prior variance of log odds ratios
data = c(small_sat, list(n = length(small_sat$r),
  p2 = dim(small_sat$x)[2],
  tau = 1/sigma^2))
jags_code  <- "model{
  for (i in 1:n) {
    x[i, 1:p2] ~ dmulti(px[1:p2],1)
    y[i] ~ dbern(inprod(x[i,1:p2], py_x[1:p2]))
    r[i] ~ dbern(pr[i])
    pr[i] <- (y[i]) * inprod(x[i,1:p2], pr_xy1[1:p2]) + abs(y[i]-1) * inprod(x[i,1:p2], pr_xy0[1:p2])
  }
  for(i in 1:p2){
    pr_xy1[i] <- ilogit(log_or_r[i] + logit(pr_xy0[i]))
  }
  px[1:p2] ~ ddirich(Int64wrapper(ones(p2)))
  for(i in 1:p2) {
    py_x[i] ~ dunif(0, 1)
    pr_xy0[i] ~ dunif(0, 1)
    log_or_r[i] ~ dnorm(0, tau)
  }
}"
results = sampling(jags_code, data, "sat", N = 15000)

results$ess
head(results$samples)


jags_code <- "model{
for (i in 1:n) {
r[i] ~ dbern(pr[i])
pr[i] <- ilogit(y[i] * alpha1 + alpha0)
y[i] ~ dpois(mu)
}
mu ~ dgamma(1,1)
alpha0 ~ dnorm(0, 0.1)
alpha1 ~ dnorm(0, tau)
}
"
data(small_count)
sigma = 0.5 #Hyperparameter, prior variance of alpha1
data = c(small_count, list(n = length(small_count$r), tau = 1/sigma^2))
sampling(jags_code, data, "pigeons", n_chains =  4, n_rounds = 4)
}
